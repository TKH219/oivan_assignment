// Mocks generated by Mockito 5.4.0 from annotations
// in oivan_assignment/test/controller_test/get_list_bookmarked_user_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:oivan_assignment/core/failure.dart' as _i5;
import 'package:oivan_assignment/data/response/response.dart' as _i6;
import 'package:oivan_assignment/domain/model/models.dart' as _i7;
import 'package:oivan_assignment/domain/use_cases/sof_user_use_case.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SofUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSofUserUseCase extends _i1.Mock implements _i3.SofUserUseCase {
  MockSofUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.GetListSofUsersResponse>>
      onGetSofUsers({
    required int? limit,
    required int? page,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #onGetSofUsers,
              [],
              {
                #limit: limit,
                #page: page,
              },
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, _i6.GetListSofUsersResponse>>.value(
                _FakeEither_0<_i5.Failure, _i6.GetListSofUsersResponse>(
              this,
              Invocation.method(
                #onGetSofUsers,
                [],
                {
                  #limit: limit,
                  #page: page,
                },
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.Failure, _i6.GetListSofUsersResponse>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.GetSofUserReputationResponse>>
      onGetSofUserDetail({
    required int? limit,
    required int? page,
    required int? userId,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #onGetSofUserDetail,
              [],
              {
                #limit: limit,
                #page: page,
                #userId: userId,
              },
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        _i6.GetSofUserReputationResponse>>.value(
                _FakeEither_0<_i5.Failure, _i6.GetSofUserReputationResponse>(
              this,
              Invocation.method(
                #onGetSofUserDetail,
                [],
                {
                  #limit: limit,
                  #page: page,
                  #userId: userId,
                },
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, _i6.GetSofUserReputationResponse>>);
  @override
  List<_i7.SofUserModel> onGetSofBookmarkedUsers() => (super.noSuchMethod(
        Invocation.method(
          #onGetSofBookmarkedUsers,
          [],
        ),
        returnValue: <_i7.SofUserModel>[],
      ) as List<_i7.SofUserModel>);
  @override
  void setSofBookmarkedUsers({required List<_i7.SofUserModel>? listUser}) =>
      super.noSuchMethod(
        Invocation.method(
          #setSofBookmarkedUsers,
          [],
          {#listUser: listUser},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SofUserModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSofUserModel extends _i1.Mock implements _i7.SofUserModel {
  MockSofUserModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get accountId => (super.noSuchMethod(
        Invocation.getter(#accountId),
        returnValue: 0,
      ) as int);
  @override
  set accountId(int? _accountId) => super.noSuchMethod(
        Invocation.setter(
          #accountId,
          _accountId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: 0,
      ) as int);
  @override
  set userId(int? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get profileImage => (super.noSuchMethod(
        Invocation.getter(#profileImage),
        returnValue: '',
      ) as String);
  @override
  set profileImage(String? _profileImage) => super.noSuchMethod(
        Invocation.setter(
          #profileImage,
          _profileImage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get displayName => (super.noSuchMethod(
        Invocation.getter(#displayName),
        returnValue: '',
      ) as String);
  @override
  set displayName(String? _displayName) => super.noSuchMethod(
        Invocation.setter(
          #displayName,
          _displayName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get reputation => (super.noSuchMethod(
        Invocation.getter(#reputation),
        returnValue: 0,
      ) as int);
  @override
  set reputation(int? _reputation) => super.noSuchMethod(
        Invocation.setter(
          #reputation,
          _reputation,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set location(String? _location) => super.noSuchMethod(
        Invocation.setter(
          #location,
          _location,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set age(int? _age) => super.noSuchMethod(
        Invocation.setter(
          #age,
          _age,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
